#!/usr/bin/env python

import os
import subprocess
import argparse
import glob
from pathlib import Path
from pathlib2 import Path
from shutil import copyfile
import sys
import argparse
from urllib.request import Request, urlopen
import requests
import pandas as pd


def ReadCoverageFile(filename):
    tables = pd.read_html(filename)  # Returns list of all tables on page
    table = tables[2]  # Select table of interest
    test_files = []
    line_coverage = {}
    branch_coverage = {}
    for i in range(2, len(table) - 1):
        test = table[0][i]
        test_files.append(test)
        line = table[2][i].strip("%\xa0").replace("-", "0")
        branch = table[4][i].strip("%\xa0").replace("-", "0")
        line_coverage[test] = float(line)
        branch_coverage[test] = float(branch)
    return test_files, line_coverage, branch_coverage


def main(master_coverage_file):
    project_dir = Path(__file__).resolve().parents[2]
    index_file = os.path.join(
        project_dir, "build", "coverage", "index.html")  # path of the warnings file generated by cmake

    test_file_master, line_coverage_master, branch_coverage_master = ReadCoverageFile(
        master_coverage_file)

    test_file_current_branch, line_coverage_current_branch, branch_coverage_current_branch = ReadCoverageFile(
        index_file)

    removed_tests = set(test_file_master).difference(
        set(test_file_current_branch))
    for test in removed_tests:
        print("The test ", test, "was removed")

    test_to_check = set(test_file_master).intersection(
        set(test_file_current_branch))
    branch_coverage_counter = 0
    line_coverage_counter = 0
    for test in test_to_check:
        line_coverage_current_value = line_coverage_current_branch[test]
        line_coverage_master_value = line_coverage_master[test]
        if(line_coverage_current_value < line_coverage_master_value):
            line_coverage_counter += 1
            print("line coverage was reduced in ", test, "\tfrom",
                  line_coverage_master_value, "\tto", line_coverage_current_value)
        branch_coverage_current_value = line_coverage_current_branch[test]
        branch_coverage_master_value = line_coverage_master[test]
        if(branch_coverage_current_value < branch_coverage_master_value):
            branch_coverage_counter += 1
            print("line coverage was reduced in ", test, "\tfrom",
                  branch_coverage_master_value, "\tto", branch_coverage_current_value)

    if(line_coverage_counter > 0 or line_coverage_counter > 0):
        return 1
    return 0


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Checks code coverage from master and compares with current branch')
    parser.add_argument('coveragefile', type=str,
                        help='file from artifac with the code coverage on master')
    args = parser.parse_args()
    file_exist = os.path.isfile(args.coveragefile)
    if(not file_exist):
        print("file not found")
        sys.exit(0)
    sys.exit(main(args.coveragefile))
